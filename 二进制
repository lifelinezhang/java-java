第一步：
计算机中加法的实现方式：
通过逻辑电路进行实现，因为只有二进制，1+1=10，0+0=0,0+1=1,1+0=1；在这种情况下进行加法计算，就跟平常我们计算十进制的
思路是一样的，要进行两部分的计算：加法的和以及进位。
在计算进位的情况下，实现方式就是与门。
在计算进位的情况下，实现方式是异或门，异或门是由一个或门和一个与非门作为一个与门的输入信号而形成的。
在此基础上就可以实现加法器了：输入端：一个进位信号，两个输入信号；输出端：一个和，一个进位符号。
然后就可以实现加法器了。
https://blog.csdn.net/mote0714/article/details/42292299

第二步：
计算机里面只有加法器，没有减法器，所有的减法运算，都要研究证明通过加法来完成。
减法转换为加法的过程：就需要用到模和补数的概念了。
a - b = a + b补 - (b + b补) = a + b补 - 模
不考虑最后模的所占位的话，那a-b=a+b补
模的值是人为规定的，可以是角度的360，可以是钟点的12。


对于二进制来说也同样如此，其中模一般定义为8 + 1,16 + 1,32 + 1这种现在在我眼里约定俗成的位数。
数字在计算机中以补码的形式存储，这样做的好处是不管加法还是减法，都可以统一进行处理。
正数的原码补码都是自身，负数的原码是：最高位是符号位，剩下位数是数字的二进制。
负数的补码计算方式是：除符号位外，其他位取反再加一。这种方式是计算机的处理方式，因为不涉及减法。
也可以用模减去绝对值，这可以作为我们的理解方法，但是这种方法不是计算机的处理方式。


java中一个字节是8位，可以有2的8次方个状态，可以承载256个数字。在符号位存在的前提下，1000 0000这个
表示就很有争议，这个到底表示的是什么。把这个当做补码来看的话，算出原码是-0，这个没任何意义，所以
人为规定这个代表-128，这样的话，一个byte的取值范围就确定了[-128,127)。

再聊Math.abs(-2147483648)= -2147483648；这个值是Integer的最小值：-2的31次方。
在计算机，去绝对值的操作是这样的：将这个数在计算机中存储的补码全部取反然后加1。
-2147483648的原码是理论上的-0，也就是1后面是31个0，他的补码也是1+31个0；
而计算机取反的方式是： 补码全部取反加1，这样的话，这个值经过操作之后还是这个其自身的补码，所以还是负的。
正负转换是补码之间的相互转换。

正数的补码可以直接读取真值的，负数的补码就是一种纯状态，要经过转换才能去读取真值。


总体思路如下：
补码的存在是为了消除减法
人为规定真值是-0的机器码的真值是-128，其反码也是该机器码。
加减和取绝对值都是在补码层次进行的运算；
取绝对值是补码全部取反然后加1，得到的这个补码的真值就是计算的结果





